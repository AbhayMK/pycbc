#! /usr/bin/env python

import os
import sqlite3
from optparse import OptionParser
import math
import numpy
from pycbc import plot
from pycbc.plot import plot_utils

parser = OptionParser()
parser.add_option('-c', '--cache-file', help = 'cache file containing result databases')
parser.add_option('-W', '--weight-function', default='uniform', help="Get effectualness for the given weight function. Default is 'uniform'. The weight name provided must exist in the description column of the coinc_definer table.")
parser.add_option('-P', '--apply-cut', action = 'append', default = [], metavar = 'arg:min,max', help = 'apply cut to injections; can specify multiple times')
parser.add_option('--log-y', action='store_true', default=False, help='Make y-axis log10.')
parser.add_option('-X', '--x-lims', metavar = 'xmin,xmax', help = 'x limits to use')
parser.add_option('-Y', '--y-lims', metavar = 'ymin,ymax', help = 'y limits to use')
parser.add_option('-T', '--tmplt-label', default='', help='set a label for the templates. This will be placed in leading subscript in the colorbar label.')
parser.add_option('-I', '--inj-label', default='', help='set a label for the injections. This will be placed in trailing subscript in the colorbar label.')
parser.add_option('-B', '--plot-bar', action='store_true', help='Plot the cumulative histogram as a bar plot. Default is False.')
parser.add_option('-N', '--nbins', type='int', default=20, help='The number of bins to use. This is only used if plot-bar is on. Default is 20.')
parser.add_option('-M', '--target-mismatch', type='float', default=0.97, help='The minimal match of the bank. Default is 0.97.')
parser.add_option('-o', '--output-dir', default='.', help = 'directory to save plot(s) to')
parser.add_option('-u', '--user-tag', help = 'set a user tag for output file names')
parser.add_option('', '--plot-type', default = 'png', help = 'type of plot to create; default is png')
parser.add_option('', '--dpi', type='int', default=300, help='DPI to use for plot. Default is 300.')
parser.add_option('', '--save-data', action='store_true', default=False, help='Save the plotting data to a pickle file. The file will have the same name as the output plot, but with a .pickle extension.')

opts, _ = parser.parse_args()

if opts.x_lims is not None:
    xmin, xmax = map(float, opts.x_lims.split(','))
else:
    xmin, xmax = (None, None)
if opts.y_lims is not None:
    ymin, ymax = map(float, opts.y_lims.split(','))
else:
    ymin, ymax = (None, None)
if opts.user_tag is not None:
    tag = '_%s' % opts.user_tag
else:
    tag = ''


print "getting results"
filenames = plot_utils.parse_results_cache(opts.cache_file)
inj_results, _ = plot_utils.get_injection_results(filenames,
    weight_function=opts.weight_function, get_inj_map=False, verbose=True)
apply_cut = {}
for thiscut in opts.apply_cut:
    arg, vals = thiscut.split(':')
    apply_cut[arg] = map(float, vals.split(','))
if apply_cut:
    print "applying cuts"
    inj_results = plot_utils.slice_results(inj_results, apply_cut)

print "plotting..."
for apprx, results in inj_results.items():
    print "\t%s" % apprx
    if opts.plot_bar:
        fig, plot_data = plot.plot_effectualness_barcumhist(results,
            opts.tmplt_label, opts.inj_label,
            target_mismatch=opts.target_mismatch, nbins=opts.nbins,
            xmin=xmin, xmax=xmax, ymin=ymin,
            ymax=ymax, logy=opts.log_y, dpi=opts.dpi)
    else:
        fig, plot_data = plot.plot_effectualness_cumhist(results,
            opts.tmplt_label, opts.inj_label,
            target_mismatch=opts.target_mismatch,
            xmin=xmin, xmax=xmax, ymin=ymin,
            ymax=ymax, logy=opts.log_y, dpi=opts.dpi)

    fig.savefig('%s/plot_effectualness_cumhist%s-%s.%s' %(opts.output_dir, tag,
        apprx, opts.plot_type), dpi=opts.dpi, bbox_inches='tight')
